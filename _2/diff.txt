diff -rupN linux-5.9/sh_task_info/sh_task_info.c linux1/sh_task_info/sh_task_info.c
--- linux-5.9/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ linux1/sh_task_info/sh_task_info.c	2020-10-28 19:50:59.307975226 +0530
@@ -0,0 +1,73 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/file.h> 
+#include <linux/fs.h>
+#include <linux/fcntl.h>
+#include <linux/proc_fs.h>
+#include <linux/module.h>
+#include <linux/buffer_head.h> 
+#include <asm/uaccess.h> 
+#include <uapi/asm-generic/errno-base.h>
+
+SYSCALL_DEFINE2(sh_task_info, int, pid, char*, filename) 
+{
+	if (pid > 32768 || pid <= 0)
+		return -EINVAL;
+	struct task_struct *task;
+	struct file *file;
+	char data[500], concat[500];
+	loff_t pos = 0;
+
+  	file = filp_open(filename, O_WRONLY|O_CREAT, 0644);
+	for_each_process(task)
+	{
+		if ((int)task->pid == pid)
+		{
+			printk("Process: %s\n", task->comm);
+			strcpy(data, "Process: ");
+			strcat(data, task->comm);
+			strcat(data, "\n");
+			
+			printk("PID Number: %ld\n", (long)task->pid);
+			strcat(data, "PID NUmber: ");
+			sprintf(concat, "%ld\n", (long)task->pid);
+			strcat(data, concat);
+			
+			printk("Process State: %ld\n", (long)task->state);
+			strcat(data, "Process State: ");
+			sprintf(concat, "%ld\n", (long)task->state);
+			strcat(data, concat);
+			
+			printk("Priority: %ld\n", (long)task->prio);
+			strcat(data, "Priority: ");
+			sprintf(concat, "%ld\n", (long)task->prio);
+			strcat(data, concat);
+			
+			printk("RT_Priority: %ld\n", (long)task->rt_priority);
+			strcat(data, "RT_Priority: ");
+			sprintf(concat, "%ld\n", (long)task->rt_priority);
+			strcat(data, concat);
+			
+			printk("Static Priority: %ld\n", (long)task->static_prio);
+			strcat(data, "Static Priority: ");
+			sprintf(concat, "%ld\n", (long)task->static_prio);
+			strcat(data, concat);
+			
+			printk("Normal Priority: %ld\n", (long)task->normal_prio);
+			strcat(data, "Normal Priority: ");
+			sprintf(concat, "%ld\n", (long)task->normal_prio);
+			strcat(data, concat);
+			
+			printk("the data is: %s", data);
+			
+			if (file==NULL)
+				return -EISDIR;
+			kernel_write(file, data, strlen(data), &pos);
+		}
+		printk("\n\n");
+	}
+	filp_close(file, NULL);
+	return 0;
+}
